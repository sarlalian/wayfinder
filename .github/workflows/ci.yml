name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Fast feedback job - runs first for quick validation
  quick-check:
    name: Quick Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: quick-check

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Check code compiles
        run: cargo check --all-targets --all-features

  # Comprehensive testing across multiple platforms and Rust versions
  test:
    name: Test Suite
    needs: quick-check
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.target }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-${{ matrix.rust }}

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config

      - name: Run unit tests
        run: cargo test --lib --verbose

      - name: Run integration tests
        run: cargo test --test integration_tests --verbose

      - name: Run parser tests
        run: cargo test --test parser_tests --verbose

      - name: Run engine tests
        run: cargo test --test engine_tests --verbose

      - name: Run CLI tests
        run: cargo test --test cli_tests --verbose

      - name: Run reporting tests
        run: cargo test --test reporting_tests --verbose

      - name: Test debug build
        run: cargo build --verbose

      - name: Test release build
        run: cargo build --release --verbose

  # Code quality and security checks
  code-quality:
    name: Code Quality
    needs: quick-check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: code-quality

      - name: Install cargo-audit
        run: cargo install --force cargo-audit

      - name: Security audit
        run: cargo audit

      - name: Install cargo-outdated
        run: cargo install --force cargo-outdated

      - name: Check outdated dependencies
        run: cargo outdated --exit-code 1 || echo "Some dependencies are outdated"

      - name: Generate documentation
        run: cargo doc --no-deps --document-private-items

  # Test example workflows to ensure they're valid
  example-validation:
    name: Example Validation
    needs: quick-check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: examples

      - name: Build wayfinder
        run: cargo build --release

      - name: Test simple workflow example
        run: ./target/release/wayfinder run examples/simple_workflow.yaml

      - name: Test script example
        run: ./target/release/wayfinder run examples/script-example.yaml

      - name: Test template functionality
        run: ./target/release/wayfinder run examples/template-test.yaml

      - name: Validate all example workflows
        run: |
          for workflow in examples/*.yaml; do
            echo "Validating $workflow..."
            ./target/release/wayfinder validate "$workflow" || echo "Warning: $workflow validation failed"
          done

  # Code coverage analysis (Linux only for speed)
  coverage:
    name: Code Coverage
    needs: quick-check
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: coverage

      - name: Install cargo-tarpaulin
        run: cargo install --force cargo-tarpaulin

      - name: Generate coverage report
        run: cargo tarpaulin --verbose --all-features --workspace --timeout 120 --out xml

      - name: Upload coverage reports
        uses: codecov/codecov-action@v5
        with:
          file: cobertura.xml
          fail_ci_if_error: false

  # Build artifacts for multiple platforms
  build-artifacts:
    name: Build Artifacts
    needs: [test, code-quality]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: wayfinder-linux-x64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: wayfinder-macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: wayfinder-macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: wayfinder-windows-x64

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Install cross-compilation tools (macOS ARM64)
        if: matrix.target == 'aarch64-apple-darwin'
        run: |
          echo "Installing cross-compilation dependencies for ARM64"

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare artifact (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p artifact
          cp target/${{ matrix.target }}/release/wayfinder artifact/
          cp -r examples artifact/ || true
          cp README.md artifact/ || true
          tar -czf ${{ matrix.artifact_name }}.tar.gz -C artifact .

      - name: Prepare artifact (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir artifact
          cp target/${{ matrix.target }}/release/wayfinder.exe artifact/
          if (Test-Path examples) { cp -r examples artifact/ }
          if (Test-Path README.md) { cp README.md artifact/ }
          Compress-Archive -Path artifact/* -DestinationPath ${{ matrix.artifact_name }}.zip

      - name: Upload artifact (Unix)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}.tar.gz

      - name: Upload artifact (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}.zip

  # Performance and size monitoring
  performance:
    name: Performance Monitoring
    needs: quick-check
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: performance

      - name: Build release binary
        run: cargo build --release

      - name: Check binary size
        run: |
          echo "Binary size information:"
          ls -lh target/release/wayfinder
          echo "Size: $(stat --printf="%s" target/release/wayfinder) bytes"

      - name: Run performance benchmarks
        run: |
          echo "Running performance benchmarks..."
          time ./target/release/wayfinder run examples/simple_workflow.yaml
          time ./target/release/wayfinder run examples/script-example.yaml

      - name: Test startup time
        run: |
          echo "Testing startup time..."
          time ./target/release/wayfinder --help > /dev/null
