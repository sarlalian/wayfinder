name: Dependency Management

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of update to perform'
        required: true
        type: choice
        options:
          - 'security-only'
          - 'patch-updates'
          - 'minor-updates'
          - 'audit-only'
        default: 'patch-updates'

env:
  CARGO_TERM_COLOR: always

jobs:
  # Security audit - always runs first
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    outputs:
      vulnerabilities_found: ${{ steps.audit.outputs.vulnerabilities_found }}
      audit_results: ${{ steps.audit.outputs.audit_results }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: security-audit

      - name: Install cargo-audit
        run: cargo install --force cargo-audit

      - name: Run security audit
        id: audit
        run: |
          # Run audit and capture output
          if cargo audit --json > audit_results.json 2>&1; then
            echo "vulnerabilities_found=false" >> $GITHUB_OUTPUT
          else
            echo "vulnerabilities_found=true" >> $GITHUB_OUTPUT
          fi
          
          # Process audit results
          if [ -f audit_results.json ]; then
            echo "Audit results found"
            cat audit_results.json | jq -r '.vulnerabilities[] | "- \(.advisory.title) (\(.advisory.id)): \(.advisory.description)"' > audit_summary.txt || echo "No vulnerabilities in JSON format"
            
            if [ -s audit_summary.txt ]; then
              echo "audit_results<<EOF" >> $GITHUB_OUTPUT
              cat audit_summary.txt >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            else
              echo "audit_results=No security vulnerabilities found" >> $GITHUB_OUTPUT
            fi
          else
            echo "audit_results=Audit completed successfully - no vulnerabilities detected" >> $GITHUB_OUTPUT
          fi

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-results
          path: |
            audit_results.json
            audit_summary.txt

  # Check for outdated dependencies
  dependency-check:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    
    outputs:
      updates_available: ${{ steps.outdated.outputs.updates_available }}
      update_summary: ${{ steps.outdated.outputs.update_summary }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: dependency-check

      - name: Install cargo-outdated
        run: cargo install --force cargo-outdated

      - name: Check for outdated dependencies
        id: outdated
        run: |
          # Generate outdated report
          if cargo outdated --format json > outdated.json 2>/dev/null; then
            # Check if there are any outdated dependencies
            OUTDATED_COUNT=$(cat outdated.json | jq '.crates | length')
            
            if [ "$OUTDATED_COUNT" -gt 0 ]; then
              echo "updates_available=true" >> $GITHUB_OUTPUT
              
              # Generate summary
              echo "update_summary<<EOF" >> $GITHUB_OUTPUT
              echo "Found $OUTDATED_COUNT outdated dependencies:" >> $GITHUB_OUTPUT
              cat outdated.json | jq -r '.crates[] | "- \(.name): \(.project) â†’ \(.compat) (latest: \(.latest))"' >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            else
              echo "updates_available=false" >> $GITHUB_OUTPUT
              echo "update_summary=All dependencies are up to date" >> $GITHUB_OUTPUT
            fi
          else
            echo "updates_available=false" >> $GITHUB_OUTPUT
            echo "update_summary=Unable to check for outdated dependencies" >> $GITHUB_OUTPUT
          fi

      - name: Generate dependency tree
        run: |
          cargo tree --format "{p} {l}" > dependency_tree.txt
          echo "Dependency tree generated"

      - name: Upload dependency analysis
        uses: actions/upload-artifact@v4
        with:
          name: dependency-analysis
          path: |
            outdated.json
            dependency_tree.txt

  # Automated dependency updates
  dependency-updates:
    name: Automated Updates
    needs: [security-audit, dependency-check]
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'schedule') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.update_type != 'audit-only')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: dependency-updates

      - name: Install cargo-edit
        run: cargo install --force cargo-edit

      - name: Determine update strategy
        id: update_strategy
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            UPDATE_TYPE="${{ github.event.inputs.update_type }}"
          else
            # Default for scheduled runs
            UPDATE_TYPE="patch-updates"
          fi
          
          echo "update_type=$UPDATE_TYPE" >> $GITHUB_OUTPUT
          echo "Selected update type: $UPDATE_TYPE"

      - name: Apply security updates
        if: contains(steps.update_strategy.outputs.update_type, 'security') || needs.security-audit.outputs.vulnerabilities_found == 'true'
        run: |
          echo "Applying security updates..."
          # For now, we'll do a careful update approach
          # In a real scenario, you'd parse the audit results and update specific crates
          cargo update --verbose

      - name: Apply patch updates
        if: steps.update_strategy.outputs.update_type == 'patch-updates'
        run: |
          echo "Applying patch-level updates..."
          cargo update --verbose

      - name: Apply minor updates
        if: steps.update_strategy.outputs.update_type == 'minor-updates'
        run: |
          echo "Applying minor version updates..."
          # This is more aggressive - would need careful testing
          cargo upgrade --compatible --verbose || echo "cargo-upgrade not available, using cargo update"
          cargo update --verbose

      - name: Run tests after updates
        run: |
          echo "Running tests to verify updates..."
          cargo check --all-targets
          cargo test --all --verbose
          
          # Test examples to ensure they still work
          cargo build --release
          ./target/release/wayfinder run examples/simple_workflow.yaml || echo "Simple workflow test failed"

      - name: Check for changes
        id: changes
        run: |
          if git diff --quiet Cargo.lock; then
            echo "changes_detected=false" >> $GITHUB_OUTPUT
            echo "No dependency changes detected"
          else
            echo "changes_detected=true" >> $GITHUB_OUTPUT
            echo "Dependency changes detected"
            
            # Generate change summary
            echo "change_summary<<EOF" >> $GITHUB_OUTPUT
            echo "## Dependency Updates" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            git diff --name-only >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "### Changes in Cargo.lock:" >> $GITHUB_OUTPUT
            git diff Cargo.lock | grep "^[+-]name = " | sort | uniq >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request
        if: steps.changes.outputs.changes_detected == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            chore(deps): automated dependency updates

            - Update type: ${{ steps.update_strategy.outputs.update_type }}
            - Security vulnerabilities: ${{ needs.security-audit.outputs.vulnerabilities_found }}
            - Updates available: ${{ needs.dependency-check.outputs.updates_available }}

            ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

            Co-Authored-By: Claude <noreply@anthropic.com>
          title: "chore(deps): automated dependency updates (${{ steps.update_strategy.outputs.update_type }})"
          body: |
            ## Automated Dependency Updates

            This PR contains automated dependency updates.

            ### Update Details
            - **Update Type**: ${{ steps.update_strategy.outputs.update_type }}
            - **Security Vulnerabilities Found**: ${{ needs.security-audit.outputs.vulnerabilities_found }}
            - **Updates Available**: ${{ needs.dependency-check.outputs.updates_available }}

            ### Security Audit Results
            ${{ needs.security-audit.outputs.audit_results }}

            ### Dependency Analysis
            ${{ needs.dependency-check.outputs.update_summary }}

            ### Changes Made
            ${{ steps.changes.outputs.change_summary }}

            ### Verification
            - âœ… Code compiles successfully
            - âœ… All tests pass
            - âœ… Example workflows validated

            ### Manual Review Required
            Please review these changes carefully before merging:
            - Check for any breaking changes in updated dependencies
            - Verify that all functionality works as expected
            - Consider running additional integration tests

            ---
            ðŸ¤– This PR was created automatically by the dependency management workflow.
            
            ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

            Co-Authored-By: Claude <noreply@anthropic.com>
          branch: deps/automated-updates-${{ github.run_number }}
          delete-branch: true
          labels: |
            dependencies
            automated
            ${{ steps.update_strategy.outputs.update_type }}

  # Report results
  report-results:
    name: Report Results
    needs: [security-audit, dependency-check, dependency-updates]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Generate Summary Report
        run: |
          echo "## Dependency Management Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Security Audit" >> $GITHUB_STEP_SUMMARY
          echo "- **Vulnerabilities Found**: ${{ needs.security-audit.outputs.vulnerabilities_found }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Results**: ${{ needs.security-audit.outputs.audit_results }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Dependency Analysis" >> $GITHUB_STEP_SUMMARY
          echo "- **Updates Available**: ${{ needs.dependency-check.outputs.updates_available }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Summary**: ${{ needs.dependency-check.outputs.update_summary }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.dependency-updates.result }}" != "skipped" ]; then
            echo "### Automated Updates" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: ${{ needs.dependency-updates.result }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "### Recommendations" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.security-audit.outputs.vulnerabilities_found }}" = "true" ]; then
            echo "- ðŸš¨ **Action Required**: Security vulnerabilities detected - review and update immediately" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.dependency-check.outputs.updates_available }}" = "true" ]; then
            echo "- ðŸ“¦ **Consider**: Dependency updates are available - review for compatibility" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.security-audit.outputs.vulnerabilities_found }}" = "false" ] && [ "${{ needs.dependency-check.outputs.updates_available }}" = "false" ]; then
            echo "- âœ… **All Good**: No security issues or outdated dependencies detected" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Set up failure notification
        if: needs.security-audit.outputs.vulnerabilities_found == 'true'
        run: |
          echo "::warning title=Security Vulnerabilities Detected::Security vulnerabilities were found in dependencies. Please review and update immediately."
          exit 1